//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include <math.h>
#include "Unit1.h"
#include "jpeg.hpp"
//#include "PngImage.hpp"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------
int __fastcall TForm1::Sgn(int I)
{
  if(I<0) return -1;
  if(I==0) return 0;
  if(I>0) return 1;
}

//---------------------------------------------------------------------------
void __fastcall TForm1::SimpleFillArray(TColor FromColor,TColor ToColor,TColor *Array)
{
	TColor Points[6];
	int	C,i;
	int R, G, B, NewR, NewG, NewB;

	Points[0]=RGB(255, 0, 0); // ???????
	Points[1]=RGB (255, 255, 0); // ??????
	Points[2]=RGB (0, 255, 0); // ???????
	Points[3]=RGB (0, 255, 255); // ???????
	Points[4]=RGB (0, 0, 255); // ?????
	i=0;
	for(C=1;C<5;C++)
	{
	  R=GetRValue(Points[C-1]);
	  G=GetGValue(Points[C-1]);
	  B=GetBValue(Points[C-1]);

	  NewR=GetRValue(Points[C]);
	  NewG=GetGValue(Points[C]);
	  NewB=GetBValue(Points[C]);
	  while((R!=NewR) || (G!=NewG) || (B!=NewB))
	  {
		 Array[i]=RGB((BYTE)R,(BYTE)G,(BYTE)B);
		 R+=Sgn(NewR - R)*4;
                 if(R>255) R=255;
                 if(R<0) R=0;
		 G+=Sgn(NewG - G)*4;
                 if(G>255) G=255;
                 if(G<0) G=0;
		 B+=Sgn(NewB - B)*4;
                 if(B>255) B=255;
                 if(B<0) B=0;
                 i++;
	  }
	}
        Array[256]=clRed;

}
//---------------------------------------------------------------------------

unsigned char __fastcall TForm1::GetLigthRegion(TCanvas *cnv,int x,int y,int reg)
{
   double res=0;
   for(int i=0;i<reg;i++)
	 for(int j=0;j<reg;j++)
		res+=((unsigned int)Image1->Picture->Bitmap->Canvas->Pixels[x+i][y+j])&0xff;
   res=(res*1.0)/(reg*reg);
   return (unsigned char)res;

}

//---------------------------------------------------------------------------

void __fastcall TForm1::SetLigthRegion(TCanvas *cnv,int x,int y,int reg,TColor Val)
{
   TColor res=Val;
   for(int i=0;i<reg;i++)
	 for(int j=0;j<reg;j++)
		Image1->Picture->Bitmap->Canvas->Pixels[x+i][y+j]=res;
}

//---------------------------------------------------------------------------

void __fastcall TForm1::Button1Click(TObject *Sender)
{
   TJPEGImage *pict=new TJPEGImage();
   pict->LoadFromFile("d:\\temp\\333_new.jpg");
   Image1->Picture->Bitmap->Assign(pict);
   Application->ProcessMessages();
   SimpleFillArray(clBlue,clRed,ColorArray);
   int len=TrackBar1->Position;
   int prm=std::pow((double)2,len);
   int cnt=int(Panel4->Width/prm);
   for(int i=0;i<Panel4->Width;i+=prm)
	  for(int j=0;j<Panel4->Height;j+=prm)
	  {
		   unsigned char rr=GetLigthRegion(Image1->Picture->Bitmap->Canvas,i,j,prm);
		   SetLigthRegion(Image1->Picture->Bitmap->Canvas,i,j,prm,ColorArray[255-rr]);
	  }
   Application->ProcessMessages();

}
//---------------------------------------------------------------------------

void __fastcall TForm1::ConvertLigthRegion(TCanvas *cnv,int x,int y,int reg,int val)
{
   int res=0;
   for(int i=0;i<reg;i++)
	 for(int j=0;j<reg;j++)
         {
                res=((unsigned int)Image1->Picture->Bitmap->Canvas->Pixels[x+i][y+j])&0xff;
                res-=val;
                if(res<0) res=0;
                if(res>0) res+=val;
		Image1->Picture->Bitmap->Canvas->Pixels[x+i][y+j]=RGB(res,res,res);
         }
}

//---------------------------------------------------------------------------

void __fastcall TForm1::Analiz2(TCanvas *cnv,int x,int y,int reg)
{
    if(reg>3)
    {
        int res=3;
        while(res<reg)
        {
           Analiz1(cnv,x+(reg-res)/2,y+(reg-res)/2,res);
           res+=2;
        }
    }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Analiz1(TCanvas *cnv,int x,int y,int reg)
{
   unsigned int mas[11][11];

   for(int i=0;i<reg;i++)
	 for(int j=0;j<reg;j++)
            mas[i][j]=((unsigned int)Image1->Picture->Bitmap->Canvas->Pixels[x+i][y+j])&0xff;

   for(int i=0;i<reg;i++) if(mas[i][0]>10 || mas[i][reg-1]>10) return;
   for(int j=0;j<reg;j++) if(mas[0][j]>10 || mas[reg-1][j]>10) return;

   for(int i=1;i<reg-1;i++)
	 for(int j=1;j<reg-1;j++)
            if(mas[i][j]>10)  Image1->Picture->Bitmap->Canvas->Pixels[x+i][y+j]=RGB(0,0,0);
}

//---------------------------------------------------------------------------

void __fastcall TForm1::Button2Click(TObject *Sender)
{
   TJPEGImage *pict=new TJPEGImage();
   pict->LoadFromFile("d:\\temp\\333.jpg");
   Image1->Picture->Bitmap->Assign(pict);
   SimpleFillArray(clBlue,clRed,ColorArray);
   unsigned char rr=GetLigthRegion(Image1->Picture->Bitmap->Canvas,0,0,996);
   Application->ProcessMessages();
   ConvertLigthRegion(Image1->Picture->Bitmap->Canvas,0,0,996,rr);
   Application->ProcessMessages();
   ProgressBar1->Min=0;
   ProgressBar1->Max=Panel4->Width;
   int factor=9;
   for(int i=0;i<Panel4->Width-factor;i++)
   {
     for(int j=0;j<Panel4->Height-factor;j++)
     {
        Analiz2(Image1->Picture->Bitmap->Canvas,i,j,factor);
     }
     Application->ProcessMessages();
     ProgressBar1->Position=i;
   }
   ProgressBar1->Position=0;

   Application->ProcessMessages();
   int len=TrackBar1->Position;
   int prm=std::pow((double)2,len);
   int cnt=int(Panel4->Width/prm);
   for(int i=0;i<Panel4->Width;i+=prm)
	  for(int j=0;j<Panel4->Height;j+=prm)
	  {
		   unsigned char rr=GetLigthRegion(Image1->Picture->Bitmap->Canvas,i,j,prm);
		   SetLigthRegion(Image1->Picture->Bitmap->Canvas,i,j,prm,ColorArray[255-rr]);
	  }

   Application->ProcessMessages();
   int temp[26];
   memset(temp,0,26*sizeof(int));
   for(int i=0;i<Panel4->Width;i++)
	  for(int j=0;j<Panel4->Height;j++)
	  {
             unsigned int rr=GetLigthRegion(Image1->Picture->Bitmap->Canvas,i,j,prm);
             temp[int(rr*0.1)]++;
          }
   Series1->Clear();
   for(int i=1;i<26;i++)
      Series1->AddXY(i,temp[i],"",clGreen);

}
//---------------------------------------------------------------------------
